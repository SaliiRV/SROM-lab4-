using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit;
using NUnit.Framework;
using Lab4;

namespace Lab4 {
    [TestFixture]
    public class Test {

        [Test]
        [TestCase
        [TestCase
        [TestCase
        public void AdditionTest(string pol1, string pol2, string expectedResult) {
            int[] a = new int[1];
            int[] b = new int[1];
            a = Program.ToByte(pol1);
            b = Program.ToByte(pol2);
            var actualResult = Program.ToStr(Program.Addition(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("11100110100011001001100111001000010010100000100011111111110100010110111001110101111110001000111010000010101111001101100001111100101100001001100110110101011110001011111100101001010101001011110000100100100110100011011111011001110111111101101101010111010101111010101110110110001111000111000100111100011100111101101100000100011100011100011100101011001111001100010100110011000111001000101111101100001110111010110011011110110101100110000100100011011", "11110011010001100100110011100100001001010000010001111111111010001011011100111010111111000100011101000001010111100110110000111110010110000100110011011010101111000101111110010100101010100101111000010010010011010001101111101100111011111110110110101011101010111101010111011011000111100011100010011110001110011110110110000010001110001110001110010101100111100110001010011001100011100100010111110110000111011101011001101111011010110011000010010001101")]
        [TestCase
        [TestCase
        public void VKvadratTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.ToByte(pol1);
            var actualResult = Program.ToStr(Program.VKvadrat(a));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("111", 1)]
        [TestCase("011", 0)]
        [TestCase("101", 0)]
        [TestCase("001", 1)]
        public void TraceTest(string pol1, int expectedResult) {
            int[] a = new int[1];
            a = Program.ToByte(pol1);
            var actualResult = Program.Tr(a);
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase
        [TestCase
        [TestCase
        public void MulTest(string pol1, string pol2, string expectedResult) {
            int[] a = new int[1];
            int[] b = new int[1];
            a = Program.ToByte(pol1);
            b = Program.ToByte(pol2);
            var actualResult = Program.ToStr(Program.Multiply(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase
        [TestCase
        [TestCase("01110111001000001000111011101110101111010101000001010100000010001111100111001010010010011010111010100010011010010011101001100100110100100100010011100110111000011001101111000111011101101010000001110010000101101110011101011111110110111011110100000111011010000110101111001011000111111011011101000010110010011011110000011110010100111101101001010001111101001010010011010111100011100111011110001101100000110111001001101100101000011010100101000110000", "11110011011011010001111101010100100011000101001100101010011010010001011010010111001111110001010100101101010000011001011111100010100000100110001000001101101111001010100110001110111010111101101010010001110011001111010110101000011111000001011111110100110001001000011001110010000110111000101000010001011110011100101010100101010110001010111001000011011000101001001110110010010111100010011110111100011111000001000110000001001110000010011110000100000", "00010000101000001000000111110011111000001000100110011010011000001000010000111110110111100111110010110010101011010110101011111010110100110000000010110010111111001000010100100000001011011111010010011000011011100011100010011001010010010110110000001001011110001010101010011100010001001000100100001010100000000000011010110111001110101101110010011100010100110111010110100101100100001011110011100101000001111110010001111100110111010000010011001000111")]
        public void PowerTest(string pol1, string N, string expectedResult) {
            int[] a = new int[1];
            int[] n = new int[1];
            a = Program.ToByte(pol1);
            n = Program.ToByte(N);
            var actualResult = Program.ToStr(Program.Power(a, n));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase
        [TestCase
        [TestCase
        public void Inverse_elTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.ToByte(pol1);
            var actualResult = Program.ToStr(Program.Inv(a));
            Assert.AreEqual(expectedResult, actualResult);
        }


    }
}
